diff --git a/node_modules/@vitest/browser/context.d.ts b/node_modules/@vitest/browser/context.d.ts
index 2202de2..0a182d4 100644
--- a/node_modules/@vitest/browser/context.d.ts
+++ b/node_modules/@vitest/browser/context.d.ts
@@ -547,7 +547,7 @@ export interface BrowserPage extends LocatorSelectors {
   /**
    * Change the size of iframe's viewport.
    */
-  viewport(width: number, height: number): Promise<void>
+  viewport(width: number, height: number, scale?: number): Promise<void>
   /**
    * Make a screenshot of the test iframe or a specific element.
    * @returns Path to the screenshot file or path and base64.
diff --git a/node_modules/@vitest/browser/dist/client/__vitest_browser__/orchestrator-CuTjqoE1.js b/node_modules/@vitest/browser/dist/client/__vitest_browser__/orchestrator-CuTjqoE1.js
index 62ea195..9b69fba 100644
--- a/node_modules/@vitest/browser/dist/client/__vitest_browser__/orchestrator-CuTjqoE1.js
+++ b/node_modules/@vitest/browser/dist/client/__vitest_browser__/orchestrator-CuTjqoE1.js
@@ -99,9 +99,9 @@ class IframeOrchestrator {
       await this.prepareIframe(container, ID_ALL);
     }
     const config = getConfig();
-    const { width, height } = config.browser.viewport;
+    const { width, height, scale } = config.browser.viewport;
     const iframe = this.iframes.get(ID_ALL);
-    await setIframeViewport(iframe, width, height);
+    await setIframeViewport(iframe, width, height, scale);
     debug("run non-isolated tests", options.files.join(", "));
     await sendEventToIframe({
       event: "execute",
@@ -113,13 +113,13 @@ class IframeOrchestrator {
   }
   async runIsolatedTestInIframe(container, file, options) {
     const config = getConfig();
-    const { width, height } = config.browser.viewport;
+    const { width, height, scale } = config.browser.viewport;
     if (this.iframes.has(file)) {
       this.iframes.get(file).remove();
       this.iframes.delete(file);
     }
     const iframe = await this.prepareIframe(container, file);
-    await setIframeViewport(iframe, width, height);
+    await setIframeViewport(iframe, width, height, scale);
     await sendEventToIframe({
       event: "execute",
       files: [file],
@@ -182,7 +182,7 @@ class IframeOrchestrator {
     debug("iframe event", JSON.stringify(e.data));
     switch (e.data.event) {
       case "viewport": {
-        const { width, height, iframeId: id } = e.data;
+        const { width, height, iframeId: id, scale } = e.data;
         const iframe = this.iframes.get(id);
         if (!iframe) {
           const error = `Cannot find iframe with id ${id}`;
@@ -200,7 +200,7 @@ class IframeOrchestrator {
           );
           break;
         }
-        await setIframeViewport(iframe, width, height);
+        await setIframeViewport(iframe, width, height, scale);
         channel.postMessage({ event: "viewport:done", iframeId: id });
         break;
       }
@@ -254,17 +254,17 @@ function generateFileId(file) {
   const path = relative(config.root, file);
   return generateHash(`${path}${project}`);
 }
-async function setIframeViewport(iframe, width, height) {
+async function setIframeViewport(iframe, width, height, scale) {
   var _a, _b;
   const ui = getUiAPI();
   if (ui) {
-    await ui.setIframeViewport(width, height);
+    await ui.setIframeViewport(width, height, scale);
   } else if (getBrowserState().provider === "webdriverio") {
     iframe.style.width = `${width}px`;
     iframe.style.height = `${height}px`;
-    (_a = iframe.parentElement) == null ? void 0 : _a.setAttribute("data-scale", "1");
+    (_a = iframe.parentElement) == null ? void 0 : _a.setAttribute("data-scale", String(scale ?? 1));
   } else {
-    const scale = Math.min(
+    const calculatedScale = Math.min(
       1,
       iframe.parentElement.parentElement.clientWidth / width,
       iframe.parentElement.parentElement.clientHeight / height
@@ -272,10 +272,10 @@ async function setIframeViewport(iframe, width, height) {
     iframe.parentElement.style.cssText = `
       width: ${width}px;
       height: ${height}px;
-      transform: scale(${scale});
+      transform: scale(${scale ?? calculatedScale});
       transform-origin: left top;
     `;
-    (_b = iframe.parentElement) == null ? void 0 : _b.setAttribute("data-scale", String(scale));
+    (_b = iframe.parentElement) == null ? void 0 : _b.setAttribute("data-scale", String(scale ?? calculatedScale));
     await new Promise((r) => requestAnimationFrame(r));
   }
 }
diff --git a/node_modules/@vitest/browser/dist/context.js b/node_modules/@vitest/browser/dist/context.js
index b3858ef..067b899 100644
--- a/node_modules/@vitest/browser/dist/context.js
+++ b/node_modules/@vitest/browser/dist/context.js
@@ -320,12 +320,13 @@ function cdp() {
 }
 const screenshotIds = {};
 const page = {
-	viewport(width, height) {
+	viewport(width, height, scale) {
 		const id = getBrowserState().iframeId;
 		channel.postMessage({
 			event: "viewport",
 			width,
 			height,
+			scale,
 			iframeId: id
 		});
 		return new Promise((resolve, reject) => {
